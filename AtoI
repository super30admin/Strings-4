//TimeComplexity.    O(n)
//SpaceComplexity.   O(1)

class Solution {
    public int myAtoi(String s) {
        s = s.trim();
        if(s.length() == 0)return 0;
        int sign = 1;
        boolean flag = false;
        
        int i = 0;

        if(s.charAt(0) == '-'){
            sign = -1;
            i++;
        }else if(s.charAt(0) == '+'){
            i++;
        }else if(!Character.isDigit(s.charAt(0))){
            return 0;
        }
        int limit = Integer.MAX_VALUE/10;
        int result = 0;
       
        
        for(; i < s.length(); i++){
            char c = s.charAt(i);
         
         if(!Character.isDigit(c)){
                break;
        }else if(Character.isDigit(c)){
                
                if(sign == 1){
                    if(result > limit)return Integer.MAX_VALUE;
                    if(result == limit){
                        if(c - '0' >= 7){
                            return Integer.MAX_VALUE;
                        }
                    }
                }else{
                    if(result > limit)return Integer.MIN_VALUE;
                    if(result == limit){
                        if(c - '0' >= 8){
                            return Integer.MIN_VALUE;
                        }
                    }
                }

                result = result * 10 + (c - '0');
               
            } 
        }
        
        
        return result * sign;

    }
}
